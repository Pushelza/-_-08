# Задание 1 Реализовать класс «Дата», функция-конструктор которого должна
# принимать дату в виде строки формата «день-месяц-год».
# В рамках класса реализовать два метода. Первый, с декоратором @classmethod,
# должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
# Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца
# и года (например, месяц — от 1 до 12). Проверить работу полученной структуры
# на реальных данных.

from datetime import date


class Data:
    def __init__(self, data):
        self.data = data.split('.')

    @classmethod
    def extract(cls, day_month_year):
        my_date = []

        for i in day_month_year.split():
            if i != '.': my_date.append(i)

        return 'Скорее всего действительная дата!'


    @staticmethod
    def valid(data):
        try:
            day, month, year = data.split('.')
            date(int(year), int(month), int(day))
            return 'Действительная дата!'
        except ValueError:
            return 'На мой взгляд неверная дата!'

print(Data.valid('02.04.2021'))
print(Data.extract('30.01.2019'))
print(Data.valid('25.02'))

# Задание 2 Создайте собственный класс-исключение, обрабатывающий ситуацию
# деления на нуль. Проверьте его работу на данных, вводимых пользователем.
# При вводе пользователем нуля в качестве делителя программа должна корректно
# обработать эту ситуацию и не завершиться с ошибкой.

class MyClassDivision:
    def __init__(self, number01, number02):
        self.number01 = number01
        self.number02 = number02

    @staticmethod
    def number_by_null(number01, number02):
        try:
            return (number01 / number02)
        except:
            return (f'Недопустимо деление на ноль')


div = MyClassDivision(20, 400)
print(MyClassDivision.number_by_null(20, 4))
print(div.number_by_null(400, 20))
print(MyClassDivision.number_by_null(400, 0))

# Задание 3 Создайте собственный класс-исключение, который должен проверять
# содержимое списка на наличие только чисел. Проверить работу исключения
# на реальном примере. Необходимо запрашивать у пользователя данные и
# заполнять список только числами. Класс-исключение должен контролировать
# типы данных элементов списка.


class Error(Exception):
    def __init__(self):
        pass


class MyClassDivision:
    def __init__(self):
        self.number_list = []

    def verification(self):
        global OnlyNumber
        while True:
            try:
                try:
                    OnlyNumber = int(input('Введите число: '))
                    ex = input(f'Добавлено {OnlyNumber} в список. Продолжим или stop? ').lower()
                    self.number_list.append(OnlyNumber)
                    if ex == 'stop':
                        print(self.number_list)
                        break
                except ValueError:
                    raise Error
            except Error:
                ex = input(f'Не число! Продолжим или stop? ').lower()
                if ex == 'stop':
                    print(self.number_list)
                    break
                else:
                    self.verification()


mcd = MyClassDivision()
mcd.verification()

# Задание 4 5 6 Начните работу над проектом «Склад оргтехники». Создайте класс,
# описывающий склад. А также класс «Оргтехника», который будет базовым для
# классов-наследников. Эти классы — конкретные типы оргтехники (принтер,
# сканер, ксерокс). В базовом классе определить параметры, общие для приведенных
# типов. В классах-наследниках реализовать параметры, уникальные для каждого
# типа оргтехники
# Продолжить работу над первым заданием. Разработать методы, отвечающие за приём
# оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники, а также
# других данных, можно использовать любую подходящую структуру, например словарь.
# Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых
# пользователем данных. Например, для указания количества принтеров, отправленных
# на склад, нельзя использовать строковый тип данных.

class Warehouse:
    def __init__(self):
        self._dict = {}

    def add_to(self, OffEqu):
        self._dict.setdefault(OffEqu.group_name(), []).append(OffEqu)

    def extract(self, name):
        if self._dict[name]:
            self._dict.setdefault(name).pop(0)


class OffEqu:
    def __init__(self, brand, name, colors, typer):
        self.brand = brand
        self.name = name
        self.colors = colors
        self.typer = typer
        self.group = self.__class__.__name__

    def group_name(self):
        return f'{self.group}'

    def __repr__(self):
        return f'{self.brand} {self.name} {self.typer} {self.colors}'


class Printer(OffEqu):
    def __init__(self, brand, name, colors, typer):
        super().__init__(brand, name, colors, typer)

def __repr__(self):
    return f'{self.brand} {self.name} {self.colors}'

class Scaner(OffEqu):
    def __init__(self, brand, name, colors, typer):
        super().__init__(brand, name, colors, typer)
        self.brand = brand
        self.name = name
        self.typer = typer

Warehouse = Warehouse()
scaner = Scaner('Canon', 'ScanFront 400', 'color', 'plangent')
Warehouse.add_to(scaner)
scaner = Scaner('Epson', 'Perfection V600 Photo', 'notcolor', 'tablet')
Warehouse.add_to(scaner)
printer = Printer('Epson', 'L805', 'color-6', 'jet')
Warehouse.add_to(printer)
printer = Printer('Canon', 'imageRUNNER 2630i', 'notcolor', 'laser')
Warehouse.add_to(printer)
print(f'Содержимое склада {Warehouse._dict}')
Warehouse.extract('Scaner')
Warehouse.extract('Printer')
print(f'Забираем со склада: Scaner1, Printer1')

print(f'Складские остатки {Warehouse._dict}')

# Задание 7 Реализовать проект «Операции с комплексными числами».
# Создайте класс «Комплексное число», реализуйте перегрузку методов
# сложения и умножения комплексных чисел. Проверьте работу проекта,
# создав экземпляры класса (комплексные числа) и выполнив сложение и
# умножение созданных экземпляров. Проверьте корректность полученного результата.

class ComplexNumber:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __add__(self, other):
        return f'Сумма чисел: {(self.a + other.a) + (self.b + other.b)}'

    def __mul__(self, other):
        return f'Произведение чисел: {(self.a * other.a - (self.b * other.b)) + (self.b * other.a)}'


c = ComplexNumber(10, 56)
d = ComplexNumber(7, 1)
print(c + d)
print(c * d)
